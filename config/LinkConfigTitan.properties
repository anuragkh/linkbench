# Sample MySQL LinkBench configuration file.
#
# This file contains settings for the data store, as well as controlling
# benchmark output and behavior.  The workload is defined in a separate
# file.
#
# At a minimum to use this file, you will need to fill in MySQL
# connection information.

##########################
# Workload Configuration #
##########################

# Path for workload properties file.  Properties in this file will override
# those in workload properties file.
# Can be absolute path, or relative path from LinkBench home directory
workload_file = config/FBWorkload.properties

#################################
#                               #
#   Data Source Configuration   #
#                               #
#################################

# Implementation of LinkStore and NodeStore to use
linkstore = edu.berkeley.cs.LinkStoreTitan
nodestore = edu.berkeley.cs.LinkStoreTitan

# dbid: the database name to use
dbid = linkdb

###############################
#                             #
#   Logging and Stats Setup   #
#                             #
###############################

# This controls logging output.  Settings are, in order of increasing
# verbosity:
# ERROR: only output serious errors
# WARN: output warnings
# INFO: output additional information such as progress
# DEBUG: output high-level debugging information
# TRACE: output more detailed lower-level debugging information
debuglevel = INFO

# display frequency of per-thread progress in seconds
progressfreq = 300

# display frequency of per-thread stats (latency, etc) in seconds
displayfreq = 1800

# display global load update (% complete, etc) after this many links loaded
load_progress_interval = 50000

# display global update on request phase (% complete, etc) after this many ops
req_progress_interval = 10000

# max number of samples to store for each per-thread statistic
maxsamples = 10000

###############################
#                             #
#  Load Phase Configuration   #
#                             #
###############################

# number of threads to run during load phase
loaders = 10

# whether to generate graph nodes during load process
generate_nodes = true

# partition loading work into chunks of id1s of this size
loader_chunk_size = 2048

# seed for initial data load random number generation (optional)
# load_random_seed = 12345

##################################
#                                #
#  Request Phase Configuration   #
#                                #
##################################

# number of threads to run during request phase
requesters = 100

# read + write requests per thread
requests = 500000

# request rate per thread.  <= 0 means unthrottled requests, > 0 limits
#  the average request rate to that number of requests per second per thread,
#  with the inter-request intervals governed by an exponential distribution
requestrate = 0

# max duration in seconds for request phase of benchmark
maxtime = 100000

# warmup time in seconds.  The benchmark is run for a warmup period
# during which no statistics are recorded. This allows database caches,
# etc to warm up.
warmup_time = 0

# seed for request random number generation (optional)
# request_random_seed = 12345

# maximum number of failures per requester to tolerate before aborting
# negative number means never abort
max_failed_requests = 100

# Titan configuration Cassandra over a socket
#
# This file connects to a Cassandra daemon running on localhost via
# Thrift.  Cassandra must already be started before starting Titan
# with this file.

# The primary persistence provider used by Titan.  This is required.  It
# should be set one of Titan's built-in shorthand names for its standard
# storage backends (shorthands: berkeleyje, cassandrathrift, cassandra,
# astyanax, embeddedcassandra, hbase, inmemory) or to the full package and
# classname of a custom/third-party StoreManager implementation.
#
# Default:    (no default value)
# Data Type:  String
# Mutability: LOCAL
storage.backend=cassandrathrift
storage.read-time=20000
storage.cassandra.thrift.frame-size=1024

# The hostname or comma-separated list of hostnames of storage backend
# servers.  This is only applicable to some storage backends, such as
# cassandra and hbase.
#
# Default:    127.0.0.1
# Data Type:  class java.lang.String[]
# Mutability: LOCAL
storage.hostname=127.0.0.1

# Whether to enable Titan's database-level cache, which is shared across
# all transactions. Enabling this option speeds up traversals by holding
# hot graph elements in memory, but also increases the likelihood of
# reading stale data.  Disabling it forces each transaction to
# independently fetch graph elements from storage before reading/writing
# them.
#
# Default:    false
# Data Type:  Boolean
# Mutability: MASKABLE
cache.db-cache = true

# How long, in milliseconds, database-level cache will keep entries after
# flushing them.  This option is only useful on distributed storage
# backends that are capable of acknowledging writes without necessarily
# making them immediately visible.
#
# Default:    50
# Data Type:  Integer
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in Titan's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use Titan's Management System
# to read or modify this value after bootstrapping.
cache.db-cache-clean-wait = 20

# Default expiration time, in milliseconds, for entries in the
# database-level cache. Entries are evicted when they reach this age even
# if the cache has room to spare. Set to 0 to disable expiration (cache
# entries live forever or until memory pressure triggers eviction when set
# to 0).
#
# Default:    10000
# Data Type:  Long
# Mutability: GLOBAL_OFFLINE
#
# Settings with mutability GLOBAL_OFFLINE are centrally managed in Titan's
# storage backend.  After starting the database for the first time, this
# file's copy of this setting is ignored.  Use Titan's Management System
# to read or modify this value after bootstrapping.
cache.db-cache-time = 180000

# Size of Titan's database level cache.  Values between 0 and 1 are
# interpreted as a percentage of VM heap, while larger values are
# interpreted as an absolute size in bytes.
#
# Default:    0.3
# Data Type:  Double
# Mutability: MASKABLE
cache.db-cache-size = 0.5
